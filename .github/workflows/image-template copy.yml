# for Privoxy
name: Build and Push Docker Image v2

on:
  workflow_dispatch:
    inputs:
      distro:
        description: "One of alpine or ubuntu"
        required: true
        type: string
        default: alpine
      release:
        description: "One of stable or edge"
        required: true
        type: string
        default: stable
      latest:
          description: "Set 'latest' tag"
          required: false
          type: boolean
          default: false

  workflow_call:
    inputs:
      distro:
        description: "One of alpine or ubuntu"
        required: true
        type: string
      release:
        description: "One of stable or edge"
        required: true
        type: string
      latest:
          description: "Set 'latest' tag"
          required: false
          type: boolean
          default: false

env:
  # name of image
  IMAGE: privoxy
  # gh or docker registry
  REGISTRY: ghcr.io
  # repository as <account>/<repo>
  IMAGE_NAME: ${{ github.event.inputs.username }}/privoxy
  # build context
  CONTEXT: .
  # image distro
  DISTRO: ${{ github.event.inputs.distro }}
  # image release
  RELEASE: ${{ github.event.inputs.release }}
  # build arguments to be created in first step
  BUILD_ARGS:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: "Set build arguments"
        id: "set-buildargs"
        env:
          ALPINE_VER: ${{ vars.ALPINE_VER }}
          UBUNTU_VER: ${{ vars.UBUNTU_VER }}
        shell: "bash"
        run: |
          {
            echo 'BUILD_ARGS<<EOF'
            [ "${DISTRO}" == alpine ] && echo \"ALPINE_VER=${ALPINE_VER}\" || echo \"UBUNTU_VER=${UBUNTU_VER}\"
            [ "${RELEASE}" == stable ] && echo \"PRIVOXY_VER=3.0.34\" || echo \"PRIVOXY_VER=3.0.35\"
            echo EOF
          } >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup QEMU for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry
      # https://github.com/docker/login-action
      ## Github Registry
      - name: Log into registry ${{env.REGISTRY}}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Docker Hub Registry
      - name: Log into Docker Hub registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,enable=${{ github.ref_name != 'schedule' && github.ref_name != 'main' }}
            type=ref,event=tag
            type=schedule,pattern=nightly
            type=raw,enable=${{ (env.DISTRO == 'alpine' && env.RELEASE == 'stable') || github.event.inputs.latest }},value=latest
            type=raw,enable=true,value=${{ env.DISTRO }}-${{ env.RELEASE }}
            type=raw,enable=${{ env.RELEASE == 'stable' }},value=${{ env.DISTRO }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.CONTEXT }}
          platforms: linux/amd64,linux/arm64
          file: docker/${{ env.DISTRO }}/${{ env.RELEASE }}/${{ env.IMAGE }}.dockerfile
          build-args: ${{ env.BUILD_ARGS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
