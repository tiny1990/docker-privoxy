# for Privoxy
name: Build and Push Docker Image

on:
  workflow_dispatch:
    inputs:
      registry:
        description: "One of ghcr.io or docker.io"
        required: true
        type: string
        default: ghcr.io
      username:
        description: "One of tmknight or tmnknight88"
        required: true
        type: string
        default: tmknight
      distro:
        description: "One of alpine or ubuntu"
        required: true
        type: string
        default: alpine
      release:
        description: "One of stable or edge"
        required: true
        type: string
        default: stable
      latest:
          description: "Set 'latest' tag"
          required: false
          type: boolean
          default: false

  workflow_call:
    inputs:
      registry:
        description: "One of ghcr.io or docker.io"
        required: true
        type: string
      username:
        description: "One of tmknight or tmnknight88"
        required: true
        type: string
      distro:
        description: "One of alpine or ubuntu"
        required: true
        type: string
      release:
        description: "One of stable or edge"
        required: true
        type: string
      latest:
          description: "Set 'latest' tag"
          required: false
          type: boolean
          default: false

env:
  REGISTRY: ${{ github.event.inputs.registry }}
  # name of image
  IMAGE: privoxy
  # repository as <account>/<repo>
  IMAGE_NAME: ${{ github.event.inputs.username }}/privoxy
  CONTEXT: .
  DISTRO: ${{ github.event.inputs.distro }}
  RELEASE: ${{ github.event.inputs.release }}

jobs:
  set-buildargs:
    name: "Set build arguments"
    runs-on: "ubuntu-latest"
    outputs:
      build-args: ${{ steps.set-buildargs.outputs.BUILD_ARGS }}

    steps:
      - name: "Get version"
        id: "set-buildargs"
        env:
          ALPINE_VER: ${{ vars.ALPINE_VER }}
          UBUNTU_VER: ${{ vars.UBUNTU_VER }}
        shell: "bash"
        run: |
          echo BUILD_ARGS=$(
            [ "${DISTRO}" == alpine ] && echo "ALPINE_VER=${ALPINE_VER}" || echo "UBUNTU_VER=${UBUNTU_VER}");
            [ "${RELEASE}" == stable ] && echo 3.0.34 || echo 3.0.35);
          ) >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: set-buildargs
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Setup QEMU for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      ## Github Registry
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.REGISTRY == 'ghcr.io'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Docker Hub Registry
      - name: Log into registry ${{ env.REGISTRY }}
        if: env.REGISTRY == 'docker.io'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,enable=${{ github.event_name != 'schedule' }}
            type=ref,event=tag
            type=schedule,pattern=nightly
            type=raw,enable=${{ (env.DISTRO == 'alpine' && env.RELEASE == 'stable') || github.event.inputs.latest }},value=latest
            type=raw,enable=true,value=${{ env.DISTRO }}-${{ env.RELEASE }}
            type=raw,enable=${{ env.RELEASE == 'stable' }},value=${{ env.DISTRO }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.CONTEXT }}
          platforms: linux/amd64,linux/arm64
          file: docker/${{ env.DISTRO }}/${{ env.RELEASE }}/${{ env.IMAGE }}.dockerfile
          build-args: |
            ${{ needs.set-buildargs.outputs.build-args }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
